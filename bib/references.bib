@inproceedings{9077707,
  author = {Anveshrithaa, S and Lavanya, K},
  booktitle = {2020 International Conference on Emerging Trends in Information Technology and Engineering (ic-ETITE)},
  doi = {10.1109/ic-ETITE47903.2020.97},
  keywords = {Deep learnin, Analytical models, Neural networks, Urban areas, Cluster computing, Predictive models, Real-time systems, Apache Kafka, LSTM, neural networks, real-time analytics, Spark streaming, traffic prediction},
  pages = {1-5},
  title = {Real-Time Vehicle Traffic Analysis using Long Short Term Memory Networks in Apache Spark},
  year = {2020},
  abstract = {Escalating traffic congestion in large and rapidly evolving metropolitan areas all around the world is one of the inescapable problems in our daily lives. In light of this situation, traffic monitoring and analytics is becoming the need of the hour. Real-time traffic analysis requires the processing of data streams that are generated continuously to gain quick insights. In order to processes stream data at a faster rate, we need technologies with high computing capacity. Big data frameworks such as Apache Hadoop, Spark and Kafka, with their capability of processing a massive amount of data, have made it possible to develop advanced and efficient data stream processing systems. The challenge of analyzing data streams for real-time prediction can be overcome by exploiting deep learning techniques. Taking this as a motivation, this work aims at developing a real-time data stream processing model for forecasting vehicle traffic, using Long Short-Term Memory (LSTM) networks to learn and train itself from traffic data. In the proposed analytical framework, the traffic data from an API is streamed using a distributed streaming platform called Kafka into the machine learning model in Apache Spark for analysis. The proposed model is aimed at predicting traffic flow information by integrating Spark and Kafka along with deep neural networks, that will be of great value to the citizens as well as the government by reducing the travel time, cost and energy, thus having a positive impact on the environment and the society.
}
}

@article{FAN2019298,
  abstract = {As location-sensing devices and apps become more prevalent, the scale and availability of big GPS trajectory data are also rapidly expanding. Big GPS trajectory data analytics offers new opportunities for gaining insights into vehicle movement dynamics and road network usage patterns that are important for transportation studies and urban planning among other fields. Processing big GPS trajectory data, consisting of billions of GPS waypoints and millions of individual trajectories is a challenging yet important task for researchers from these different domains. In this research, we propose an Apache Spark-based geo-computing framework for using big GPS trajectory data to estimate vehicle miles travelled, an important metric used by both federal and state highway agencies in the United States for transportation planning. The computing challenge lies in scaling the processing of billions of raw GPS points data as well as the steps for map matching for a statewide road network consisting of thousands of road segments. In this work, we develop a scalable map-matching module that considers both the spatiotemporal information of GPS waypoint sequences and topologic information of road network for the State of Maryland while striking a balance between matching accuracy and computing time. We processed 19.8 million raw GPS trips consisting of approximately 1.4 billion GPS waypoints collected in Maryland during a four-month period in 2015 to estimate vehicle miles travelled for Maryland’s road network. The estimation results show that using big GPS trajectory analytic methods is promising for obtaining accurate and stable vehicle miles travelled estimates.},
  author = {Junchuan Fan and Cheng Fu and Kathleen Stewart and Lei Zhang},
  doi = {https://doi.org/10.1016/j.trc.2019.04.019},
  issn = {0968-090X},
  journal = {Transportation Research Part C: Emerging Technologies},
  keywords = {Big data, GPS trajectory, Vehicle miles travelled, Apache spark, Geo-computing},
  pages = {298-307},
  title = {Using big GPS trajectory data analytics for vehicle miles traveled estimation},
  url = {https://www.sciencedirect.com/science/article/pii/S0968090X18313706},
  volume = {103},
  year = {2019}
}

@article{gora2020microscopic,
  title = {Microscopic traffic simulation models for connected and automated vehicles (CAVs) – state-of-the-art},
  journal = {Procedia Computer Science},
  volume = {170},
  pages = {474-481},
  year = {2020},
  note = {The 11th International Conference on Ambient Systems, Networks and Technologies (ANT) / The 3rd International Conference on Emerging Data and Industry 4.0 (EDI40) / Affiliated Workshops},
  issn = {1877-0509},
  doi = {https://doi.org/10.1016/j.procs.2020.03.091},
  url = {https://www.sciencedirect.com/science/article/pii/S1877050920305287},
  author = {Paweł Gora and Christos Katrakazas and Arkadiusz Drabicki and Faqhrul Islam and Piotr Ostaszewski},
  keywords = {microscopic traffic models, connected, automated vehicles, metaresearch},
  abstract = {Research on connected and automated vehicles (CAVs) has been gaining substantial momentum in recent years. However, the vast amount of literature sources results in a wide range of applied tools and datasets, assumed methodology to investigate the potential impacts of future CAVs traffic, and, consequently, differences in the obtained findings. This limits the scope of their comparability and applicability and calls for a proper standardization in this field of research. The objective of this paper is to contribute towards bridging this gap by providing a summary of the state-of-the-art literature review regarding microscopic simulation models for connected and automated vehicles.}
}

@inproceedings{Sigurdsson2018RoadTC,
  author = {Thorsteinn Thorri Sigurdsson},
  title = {Road traffic congestion detection and tracking with Spark Streaming analytics},
  url = {https://api.semanticscholar.org/CorpusID:199016126},
  keywords = {streaming, graph processing, congestion,
community detection, connected components},
  year = {2018}
}

@article{yu2020dissecting,
  author = {Yu, Jia and Fu, Zishan and Sarwat, Mohamed},
  journal = {Distributed and Parallel Databases},
  number = {4},
  pages = {963--994},
  publisher = {Springer},
  title = {Dissecting geosparksim: a scalable microscopic road network traffic simulator in apache spark},
  volume = {38},
  keywords = {Spatio-temporal data, Apache Spark, Traffic model, Microscopic traffic
simulation},
  doi = {https://doi.org/10.1007/s10619-020-07306-x},
  year = {2020},
  abstract = {Researchers and practitioners have widely studied road network traffic data in different areas such as urban planning, traffic prediction and spatial-temporal databases. For instance, researchers use such data to evaluate the impact of road network changes. Unfortunately, collecting large-scale high-quality urban traffic data requires tremendous efforts because participating vehicles must install global positioning system(GPS) receivers and administrators must continuously monitor these devices. There have been some urban traffic simulators trying to generate such data with different features. However, they suffer from two critical issues (1) Scalability: most of them only offer single-machine solution which is not adequate to produce large-scale data. Some simulators can generate traffic in parallel but do not well balance the load among machines in a cluster. (2) Granularity: many simulators do not consider microscopic traffic situations including traffic lights, lane changing, car following. This paper proposed GeoSparkSim, a scalable traffic simulator which extends Apache Spark to generate large-scale road network traffic datasets with microscopic traffic simulation. The proposed system seamlessly integrates with a Spark-based spatial data management system, GeoSpark, to deliver a holistic approach that allows data scientists to simulate, analyze and visualize large-scale urban traffic data. To implement microscopic traffic models, GeoSparkSim employs a simulation-aware vehicle partitioning method to partition vehicles among different machines such that each machine has a balanced workload. The experimental analysis shows that GeoSparkSim can simulate the movements of 300 thousand vehicles over a very large road network (250 thousand road junctions and 300 thousand road segments) and outperform the existing competitors.
}
}

@article{Zhang20231124,
  author            = {Zhang, Peiqi and Stewart, Kathleen and Li, Yao},
  title             = {Estimating traffic speed and speeding using passively collected big mobility data and a distributed computing framework},
  year              = {2023},
  journal           = {Transactions in GIS},
  volume            = {27},
  number            = {4},
  pages             = {1124 – 1144},
  doi               = {10.1111/tgis.13061},
  url               = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85158139961&doi=10.1111%2ftgis.13061&partnerID=40&md5=4b3b85c991c4f5286d537388e4bb0fe3},
  abstract          = {With the increasing availability of location-aware devices, passively collected big GPS trajectory data offer new opportunities for analyzing human mobility. Processing big GPS trajectory data, especially extracting information from billions of trajectory points and assigning information to corresponding road segments in road networks, is a challenging but necessary task for researchers to take full advantage of big data. In this research, we propose an Apache Spark and Sedona-based computing framework that is capable of estimating traffic speeds for statewide road networks from GPS trajectory data. Taking advantage of spatial resilient distributed datasets supported by Sedona, the framework provides high computing efficiency while using affordable computing resources for map matching and waypoint gap filling. Using a mobility dataset of 126 million trajectory points collected in California, and a road network inclusive of all road types, we computed hourly speed estimates for approximately 600,000 segments across the state. Comparing speed estimates for freeway segments with speed limits, our speed estimates showed that speeding on freeways occurred mostly during the nighttime, while analysis of travel on residential roads showed that speeds were relatively stable over the 24-h period. © 2023 John Wiley & Sons Ltd.},
  keywords          = {California, United States, Distributed computer systems, Motor transportation, Roads and streets, Distributed computing frameworks, Extracting information, Human mobility, Location-aware, Mobility datum, Road network, Road segments, Traffic speed, Trajectories datum, Trajectory points, estimation method, GPS, mobility, road transport, trajectory, travel time, Trajectories},
  type              = {Article},
  publication_stage = {Final},
  source            = {Scopus},
  note              = {Cited by: 1}
}

@inproceedings{10.1145/2820783.2820860,
  author    = {Yu, Jia and Wu, Jinxuan and Sarwat, Mohamed},
  title     = {GeoSpark: a cluster computing framework for processing large-scale spatial data},
  year      = {2015},
  isbn      = {9781450339674},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2820783.2820860},
  doi       = {10.1145/2820783.2820860},
  abstract  = {This paper introduces GeoSpark an in-memory cluster computing framework for processing large-scale spatial data. GeoSpark consists of three layers: Apache Spark Layer, Spatial RDD Layer and Spatial Query Processing Layer. Apache Spark Layer provides basic Spark functionalities that include loading / storing data to disk as well as regular RDD operations. Spatial RDD Layer consists of three novel Spatial Resilient Distributed Datasets (SRDDs) which extend regular Apache Spark RDDs to support geometrical and spatial objects. GeoSpark provides a geometrical operations library that accesses Spatial RDDs to perform basic geometrical operations (e.g., Overlap, Intersect). System users can leverage the newly defined SRDDs to effectively develop spatial data processing programs in Spark. The Spatial Query Processing Layer efficiently executes spatial query processing algorithms (e.g., Spatial Range, Join, KNN query) on SRDDs. GeoSpark also allows users to create a spatial index (e.g., R-tree, Quad-tree) that boosts spatial data processing performance in each SRDD partition. Preliminary experiments show that GeoSpark achieves better run time performance than its Hadoop-based counterparts (e.g., SpatialHadoop).},
  booktitle = {Proceedings of the 23rd SIGSPATIAL International Conference on Advances in Geographic Information Systems},
  articleno = {70},
  numpages  = {4},
  keywords  = {cluster computing, large-scale data, spatial data},
  location  = {Seattle, Washington},
  series    = {SIGSPATIAL '15}
}

@inproceedings{10.1145/3397536.3422274, 
author = {Chen, Hao and Yang, Ke and Rizzo, Stefano Giovanni and Vantini, Giovanna and Taylor, Phillip and Ma, Xiaosong and Chawla, Sanjay}, 
title = {QarSUMO: A Parallel, Congestion-optimized Traffic Simulator}, 
year = {2020}, 
isbn = {9781450380195}, 
publisher = {Association for Computing Machinery}, 
address = {New York, NY, USA}, 
url = {https://doi.org/10.1145/3397536.3422274}, 
doi = {10.1145/3397536.3422274}, 
abstract = {Traffic simulators are important tools for tasks such as urban planning and transportation management. Microscopic simulators allow per-vehicle movement simulation, but require longer simulation time. The simulation overhead is exacerbated when there is traffic congestion and most vehicles move slowly. This in particular hurts the productivity of emerging urban computing studies based on reinforcement learning, where traffic simulations are heavily and repeatedly used for designing policies to optimize traffic related tasks.In this paper, we develop QarSUMO, a parallel, congestion-optimized version of the popular SUMO open-source traffic simulator. QarSUMO performs high-level parallelization on top of SUMO, to utilize powerful multi-core servers and enables future extension to multi-node parallel simulation if necessary. The proposed design, while partly sacrificing speedup, makes QarSUMO compatible with future SUMO improvements. We further contribute such an improvement by modifying the SUMO simulation engine for congestion scenarios where the update computation of consecutive and slow-moving vehicles can be simplified. We evaluate QarSUMO with both real-world and synthetic road network and traffic data, and examine its execution time as well as simulation accuracy relative to the original, sequential SUMO.}, 
booktitle = {Proceedings of the 28th International Conference on Advances in Geographic Information Systems}, 
pages = {578–588}, 
numpages = {11}, 
keywords = {transportation simulation, distributed and parallel computing}, location = {Seattle, WA, USA}, 
series = {SIGSPATIAL '20} 
}

@INPROCEEDINGS{8569938,
  author={Lopez, Pablo Alvarez and Behrisch, Michael and Bieker-Walz, Laura and Erdmann, Jakob and Flötteröd, Yun-Pang and Hilbrich, Robert and Lücken, Leonhard and Rummel, Johannes and Wagner, Peter and Wiessner, Evamarie},
  booktitle={2018 21st International Conference on Intelligent Transportation Systems (ITSC)}, 
  title={Microscopic Traffic Simulation using SUMO}, 
  year={2018},
  volume={},
  number={},
  pages={2575-2582},
  abstract={Microscopic traffic simulation is an invaluable tool for traffic research. In recent years, both the scope of research and the capabilities of the tools have been extended considerably. This article presents the latest developments concerning intermodal traffic solutions, simulator coupling and model development and validation on the example of the open source traffic simulator SUMO.},
  keywords={Tools, Microscopy, Roads, Data models, Urban areas, Vehicle dynamics,Mathematical model},
  doi={10.1109/ITSC.2018.8569938},
  ISSN={2153-0017},
  month={Nov},}

@ARTICLE{9075295,
  author={Huang, Yu and Li, Yan and Zhang, Zhaofeng and Liu, Ryan Wen},
  journal={IEEE Internet of Things Journal}, 
  title={GPU-Accelerated Compression and Visualization of Large-Scale Vessel Trajectories in Maritime IoT Industries}, 
  year={2020},
  volume={7},
  number={11},
  pages={10794-10812},
  abstract={The automatic identification system (AIS), an automatic vessel-tracking system, has been widely adopted to perform intelligent traffic management and collision avoidance services in maritime Internet-of-Things (IoT) industries. With the rapid development of maritime transportation, tremendous numbers of AIS-based vessel trajectory data have been collected, which make trajectory data compression imperative and challenging. This article mainly focuses on the compression and visualization of large-scale vessel trajectories and their graphics processing unit (GPU)-accelerated implementations. The visualization was implemented to investigate the influence of compression on vessel trajectory data quality. In particular, the Douglas-Peucker (DP) and kernel density estimation (KDE) algorithms, respectively, utilized for trajectory compression and visualization, were significantly accelerated through the massively parallel computation capabilities of the GPU architecture. Comprehensive experiments on trajectory compression and visualization have been conducted on large-scale AIS data of recording ship movements collected from three different water areas, i.e., the South Channel of Yangtze River Estuary, the Chengshan Jiao Promontory, and the Zhoushan Islands. Experimental results illustrated that: 1) the proposed GPU-based parallel implementation frameworks could significantly reduce the computational time for both trajectory compression and visualization; 2) the influence of compressed vessel trajectories on trajectory visualization could be negligible if the compression threshold was selected suitably; and 3) the Gaussian kernel was capable of generating more appropriate KDE-based visualization performance by comparing with other seven kernel functions.},
  keywords={Trajectory, Data visualization, Graphics processing units, Internet of Things, Artificial intelligence, Industries, Acceleration, Data visualization,graphics processing unit (GPU), parallel computing, trajectory compression,vessel trajectory},
  doi={10.1109/JIOT.2020.2989398},
  ISSN={2327-4662},
  month={Nov},}

@ARTICLE{10356753,
  author={Liang, Huanghuang and Zhang, Zheng and Hu, Chuang and Gong, Yili and Cheng, Dazhao},
  journal={IEEE Transactions on Big Data}, 
  title={A Survey on Spatio-Temporal Big Data Analytics Ecosystem: Resource Management, Processing Platform, and Applications}, 
  year={2024},
  volume={10},
  number={2},
  pages={174-193},
  abstract={With the rapid evolution of the Internet, Internet of Things (IoT), and geographic information systems (GIS), spatio-temporal Big Data (STBD) is experiencing exponential growth, marking the onset of the STBD era. Recent studies have concentrated on developing algorithms and techniques for the collection, management, storage, processing, analysis, and visualization of STBD. Researchers have made significant advancements by enhancing STBD handling techniques, creating novel systems, and integrating spatio-temporal support into existing systems. However, these studies often neglect resource management and system optimization, crucial factors for enhancing the efficiency of STBD processing and applications. Additionally, the transition of STBD to the innovative Cloud-Edge-End unified computing system needs to be noticed. In this survey, we comprehensively explore the entire ecosystem of STBD analytics systems. We delineate the STBD analytics ecosystem and categorize the technologies used to process GIS data into five modules: STBD, computation resources, processing platform, resource management, and applications. Specifically, we subdivide STBD and its applications into geoscience-oriented and human-social activity-oriented. Within the processing platform module, we further categorize it into the data management layer (DBMS-GIS), data processing layer (BigData-GIS), data analysis layer (AI-GIS), and cloud native layer (Cloud-GIS). The resource management module and each layer in the processing platform are classified into three categories: task-oriented, resource-oriented, and cloud-based. Finally, we propose research agendas for potential future developments.},
  keywords={Resource management, Big Data, Cloud computing, Geographic information systems, Artificial intelligence, Ecosystems, Data processing, Artificial intelligence framework, Big Data system, cloud platform, database management system, geographic information system, resource management, spatio-temporal Big Data},
  doi={10.1109/TBDATA.2023.3342619},
  ISSN={2332-7790},
  month={April},}

@inproceedings{STARK,
author = {Hagedorn, Stefan and Götze, Philipp and Sattler, Kai-Uwe},
year = {2017},
month = {01},
pages = {},
title = {The STARK Framework for Spatio-Temporal Data Analytics on Spark},
abstract={Big Data sets can contain all types of information: from server log files to tracking information of mobile users with their location at a point in time. Apache Spark has been widely accepted for Big Data analytics because of its very fast processing model. However, Spark has no native support for spatial or spatio-temporal data. Spatial filters or joins using, e.g., a contains predicate are not supported and would have to be implemented inefficiently by the users. Also, Spark cannot make use of, e.g., spatial distribution for optimal partitioning. Here we present our STARK framework that adds spatio-temporal support to Spark. It includes spatial partitioners, different modes for indexing, as well as filter, join, and clustering operators. In contrast to existing solutions, STARK integrates seamlessly into any (Scala) Spark program and provides more flexible and comprehensive operators. Furthermore, our experimental evaluation shows that our implementation outperforms existing solutions.}
}

@article{LI2020225,
title = {Trajectory data-based traffic flow studies: A revisit},
journal = {Transportation Research Part C: Emerging Technologies},
volume = {114},
pages = {225-240},
year = {2020},
issn = {0968-090X},
doi = {https://doi.org/10.1016/j.trc.2020.02.016},
url = {https://www.sciencedirect.com/science/article/pii/S0968090X19312987},
author = {Li Li and Rui Jiang and Zhengbing He and Xiqun (Michael) Chen and Xuesong Zhou},
keywords = {Traffic flow, Trajectory data, Data collection, Big data},
abstract = {In this paper, we review trajectory data-based traffic flow studies that have been conducted over the last 15 years. Our purpose is to provide a roadmap for readers who have an interest in the latest developments of traffic flow theory that have been stimulated by the availability of trajectory data. We first highlight the critical role of trajectory data (especially the next generation simulation (NGSIM) trajectory dataset) in the recent history of traffic flow studies. Then, we summarize new traffic phenomena/models at the microscopic/mesoscopic/macroscopic levels and provide a unified view of these achievements perceived from different directions of traffic flow studies. Finally, we discuss some future research directions.}
}

@inproceedings{10.1007/978-981-16-4126-8_24,
author={Alba Valencia, Ver{\'o}nica
and Proa{\~{n}}o Orellana, Julio},
editor={Rocha, {\'A}lvaro
and L{\'o}pez-L{\'o}pez, Paulo Carlos
and Salgado-Guerrero, Juan Pablo},
title={Design and Evaluation of a Distributed Architecture for GeoSparkSim},
booktitle={Communication, Smart Technologies and Innovation for Society},
year={2022},
publisher={Springer Singapore},
address={Singapore},
pages={253--263},
abstract={The human being throughout history has developed ways to optimize his time and resources. Nowadays, mobility is one of the biggest problems. Traffic simulation tools are frequently used to study mobility problems. GeoSparkSim is a vehicular traffic simulation tool that extends Apache Spark to generate datasets of road network traffic significantly with the simulation of microscopic traffic that includes traffic lights, change of track, and the pursuit of vehicles. This work presents an architecture to implement and evaluate the GeoSparkSim simulation tool. The architecture was developed on different containers in Docker, and two stages of the study were created for its evaluation. Each stage contains 26 simulations in different geographic zones from the Quito city. Results show the potentials of GeoSparkSim in order to study traffic mobility and compare its implementation on different Cloud services such as Google, Amazon, and Azure. In order to have an acceptable simulation, we found a machine that has at least 146 GB in storage and 8 GB in RAM is recommended.},
isbn={978-981-16-4126-8},
keywords={Apache Spark, Data space-oriented approach (DSO), Microscopic traffic simulation, Network-based approach (NB), Resilient distributed datasets (RDD), Spatio-temporal data}
}
